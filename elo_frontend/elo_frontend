#!/usr/bin/python
"""Elo Frontend

This script will deploy a flask webserver to host the elo server frontend. This dashboard will
display information and functionality for the user.

@file elo_frontend

@author Tyler Shake

@par Notifications:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The below copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@copyright Copyright 2019 Tyler Shake

"""

import os
import traceback
import sys
import argparse
import ConfigParser
import flask
import pkg_resources
import appdirs

import elo_frontend

FRONTEND = flask.Flask(
    __name__,
    static_folder=pkg_resources.resource_filename('elo_frontend', 'static'),
    template_folder=pkg_resources.resource_filename('elo_frontend', 'templates'))

DB_MANAGER = elo_frontend.DBManager(db_user='elo', db_pass='password')

@FRONTEND.route('/')
def index_redirect():
    """Main entrypoint to webpage

    Returns:
        displays landing page

    """

    return flask.render_template('landing.html')

@FRONTEND.route('/index.html')
def index():
    """Landing page

    Returns:
        displays landing page

    """

    return flask.render_template('landing.html')

@FRONTEND.route('/login.html')
def login():
    """Login page

    Returns:
        displays login page

    """

    return flask.render_template('login.html')

@FRONTEND.route('/mk.html')
def mk_home():
    """Mario Kart home page

    Returns:
        displays Mario Kart home page

    """

    player_count = DB_MANAGER.get_total_players()
    race_count = DB_MANAGER.get_total_mkresults()
    individual_ranks = DB_MANAGER.get_mk_ind_rankings()
    individual_ranks = sorted(individual_ranks, key=lambda tup: tup[3],
        reverse=True)
    return flask.render_template('mk.html', player_count=player_count, race_count=race_count,
        individual_ranks=individual_ranks)

@FRONTEND.route('/mkplayer.html')
def mk_player():
    """Mario Kart player page

    Returns:
        displays Mario Kart player page

    """

    players = DB_MANAGER.get_all_players()
    return flask.render_template('mkplayer.html', players=players)

@FRONTEND.route('/mkteam.html')
def mk_team():
    """Mario Kart team page

    Returns:
        displays Mario Kart team page

    """

    return flask.render_template('mkteam.html')

@FRONTEND.route('/mkresult.html')
def mk_result():
    """Mario Kart result page

    Returns:
        displays Mario Kart result page

    """

    results = DB_MANAGER.get_all_mkresults()
    return flask.render_template('mkresult.html', results=results)

@FRONTEND.route('/mkstat.html')
def mk_stat():
    """Mario Kart stat page

    Returns:
        displays Mario Kart stat page

    """

    return flask.render_template('mkstat.html')

@FRONTEND.route('/mp.html')
def mp_home():
    """Mario Party home page

    Returns:
        displays Mario Party home page

    """

    player_count = DB_MANAGER.get_total_players()
    return flask.render_template('mp.html', player_count=player_count)

@FRONTEND.route('/mpplayer.html')
def mp_player():
    """Mario Party player page

    Returns:
        displays Mario Party player page

    """

    players = DB_MANAGER.get_all_players()
    return flask.render_template('mpplayer.html', players=players)

@FRONTEND.route('/mpteam.html')
def mp_team():
    """Mario Party team page

    Returns:
        displays Mario Party team page

    """

    return flask.render_template('mpteam.html')

@FRONTEND.route('/mpresult.html')
def mp_result():
    """Mario Party result page

    Returns:
        displays Mario Party result page

    """

    return flask.render_template('mpresult.html')

@FRONTEND.route('/mpstat.html')
def mp_stat():
    """Mario Party stat page

    Returns:
        displays Mario Party stat page

    """

    return flask.render_template('mpstat.html')

@FRONTEND.route('/ss.html')
def ss_home():
    """Super Smash home page

    Returns:
        displays Super Smash home page

    """

    player_count = DB_MANAGER.get_total_players()
    match_count = DB_MANAGER.get_total_ssresults()
    individual_ranks = DB_MANAGER.get_ss_ind_rankings()
    individual_ranks = sorted(individual_ranks, key=lambda tup: tup[3],
        reverse=True)
    return flask.render_template('ss.html', player_count=player_count,
        match_count=match_count, individual_ranks=individual_ranks)

@FRONTEND.route('/ssplayer.html')
def ss_player():
    """Super Smash player page

    Returns:
        displays Super Smash player page

    """

    players = DB_MANAGER.get_all_players()
    return flask.render_template('ssplayer.html', players=players)

@FRONTEND.route('/ssteam.html')
def ss_team():
    """Super Smash team page

    Returns:
        displays Super Smash team page

    """

    return flask.render_template('ssteam.html')

@FRONTEND.route('/ssresult.html')
def ss_result():
    """Super Smash result page

    Returns:
        displays Super Smash result page

    """

    return flask.render_template('ssresult.html')

@FRONTEND.route('/ssstat.html')
def ss_stat():
    """Super Smash stat page

    Returns:
        displays Super Smash stat page

    """

    return flask.render_template('ssstat.html')

@FRONTEND.route('/pp.html')
def pp_home():
    """Ping Pong home page

    Returns:
        displays Ping Pong home page

    """

    player_count = DB_MANAGER.get_total_players()
    game_count = DB_MANAGER.get_total_ppresults()
    individual_ranks = DB_MANAGER.get_pp_ind_rankings()
    individual_ranks = sorted(individual_ranks, key=lambda tup: tup[3], reverse=True)
    return flask.render_template('pp.html', player_count=player_count, game_count=game_count,
                                 individual_ranks=individual_ranks)

@FRONTEND.route('/ppplayer.html')
def pp_player():
    """Ping pong player page

    Returns:
        displays ping pong player page

    """

    players = DB_MANAGER.get_all_players()
    return flask.render_template('ppplayer.html', players=players)

@FRONTEND.route('/ppresult.html')
def pp_result():
    """Ping pong result page

    Returns:
        displays ping pong result page

    """

    results = DB_MANAGER.get_all_ppresults()
    return flask.render_template('ppresult.html', results=results)

@FRONTEND.route('/ppstat.html')
def pp_stat():
    """Ping pong stat page

    Returns:
        displays ping pong stat page

    """

    return flask.render_template('ppstat.html')

@FRONTEND.route('/fb.html')
def fb_home():
    """Foosball home page

    Returns:
        displays Foosball home page

    """

    player_count = DB_MANAGER.get_total_players()
    team_count = DB_MANAGER.get_total_fb_teams()
    game_count = DB_MANAGER.get_total_fbresults()
    individual_ranks = DB_MANAGER.get_fb_ind_rankings()
    individual_ranks = sorted(individual_ranks, key=lambda tup: tup[4],
        reverse=True)
    team_ranks = DB_MANAGER.get_fb_team_rankings()
    team_ranks = sorted(team_ranks, key=lambda tup: tup[1],
        reverse=True)
    return flask.render_template(
        'fb.html', player_count=player_count, team_count=team_count,
        individual_ranks=individual_ranks, team_ranks=team_ranks, game_count=game_count)

@FRONTEND.route('/fbplayer.html')
def fb_player():
    """Foosball player page

    Returns:
        displays foosball player page

    """

    players = DB_MANAGER.get_all_players()
    return flask.render_template('fbplayer.html', players=players)

@FRONTEND.route('/fbteam.html')
def fb_team():
    """Foosball team page

    Returns:
        displays Foosball team page

    """

    teams = DB_MANAGER.get_all_fb_teams()
    return flask.render_template('fbteam.html', teams=teams)

@FRONTEND.route('/fbresult.html')
def fb_result():
    """Foosball result page

    Returns:
        displays Foosball result page

    """

    results = DB_MANAGER.get_all_fbresults()
    return flask.render_template('fbresult.html', results=results)

@FRONTEND.route('/fbstat.html')
def fb_stat():
    """Foosball stat page

    Returns:
        displays foosball stat page

    """

    return flask.render_template('fbstat.html')

@FRONTEND.route('/addppplayer.html', methods=['GET', 'POST'])
def add_ppplayer():
    """Ping pong add player page

    Returns:
        displays ping pong player page

    """

    if flask.request.method == 'POST':
        first_name = flask.request.form['first_name'].encode('utf-8')
        last_name = flask.request.form['last_name'].encode('utf-8')
        nickname = flask.request.form['nickname'].encode('utf-8')

        try:
            DB_MANAGER.add_player(first_name=first_name, last_name=last_name,
                                  nickname=nickname)
        except elo_frontend.DBValueError as error:
            return flask.render_template('addppplayer.html', error=error)
        else:
            pass

        message = 'Player successfully added'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('ppplayer.html', message=message,
                                     players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('addppplayer.html')

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addfbplayer.html', methods=['GET', 'POST'])
def add_fbplayer():
    """Foosball add player page

    Returns:
        displays foosball player page

    """

    if flask.request.method == 'POST':
        first_name = flask.request.form['first_name'].encode('utf-8')
        last_name = flask.request.form['last_name'].encode('utf-8')
        nickname = flask.request.form['nickname'].encode('utf-8')

        try:
            DB_MANAGER.add_player(first_name=first_name, last_name=last_name,
                                  nickname=nickname)
        except elo_frontend.DBValueError as error:
            return flask.render_template('addfbplayer.html', error=error)
        else:
            pass

        message = 'Player successfully added'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('fbplayer.html', message=message,
                                     players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('addfbplayer.html')

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addmkplayer.html', methods=['GET', 'POST'])
def add_mkplayer():
    """Mario kart add player page

    Returns:
        displays mario kart player page

    """

    if flask.request.method == 'POST':
        first_name = flask.request.form['first_name'].encode('utf-8')
        last_name = flask.request.form['last_name'].encode('utf-8')
        nickname = flask.request.form['nickname'].encode('utf-8')

        try:
            DB_MANAGER.add_player(first_name=first_name, last_name=last_name,
                                  nickname=nickname)
        except elo_frontend.DBValueError as error:
            return flask.render_template('addmkplayer.html', error=error)
        else:
            pass

        message = 'Player successfully added'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('mkplayer.html', message=message,
                                     players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('addmkplayer.html')

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addmpplayer.html', methods=['GET', 'POST'])
def add_mpplayer():
    """Mario party add player page

    Returns:
        displays mario party player page

    """

    if flask.request.method == 'POST':
        first_name = flask.request.form['first_name'].encode('utf-8')
        last_name = flask.request.form['last_name'].encode('utf-8')
        nickname = flask.request.form['nickname'].encode('utf-8')

        try:
            DB_MANAGER.add_player(first_name=first_name, last_name=last_name,
                                  nickname=nickname)
        except elo_frontend.DBValueError as error:
            return flask.render_template('addmpplayer.html', error=error)
        else:
            pass

        message = 'Player successfully added'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('mpplayer.html', message=message,
                                     players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('addmpplayer.html')

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addssplayer.html', methods=['GET', 'POST'])
def add_ssplayer():
    """Super smash add player page

    Returns:
        displays super smash player page

    """

    if flask.request.method == 'POST':
        first_name = flask.request.form['first_name'].encode('utf-8')
        last_name = flask.request.form['last_name'].encode('utf-8')
        nickname = flask.request.form['nickname'].encode('utf-8')

        try:
            DB_MANAGER.add_player(first_name=first_name, last_name=last_name,
                                  nickname=nickname)
        except elo_frontend.DBValueError as error:
            return flask.render_template('addssplayer.html', error=error)
        else:
            pass

        message = 'Player successfully added'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('ssplayer.html', message=message,
                                     players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('addssplayer.html')

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addppresult.html', methods=['GET', 'POST'])
def add_ppresult():
    """Ping pong add result page

    Returns:
        displays ping pong add result page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        winner = flask.request.form['winner'].encode('utf-8')
        loser = flask.request.form['loser'].encode('utf-8')

        first_quote = winner.find('"')
        second_quote = winner.find('"', first_quote + 1)
        final_winner = (winner[:first_quote - 1],
                        winner[second_quote + 2:],
                        winner[first_quote + 1:second_quote])

        first_quote = loser.find('"')
        second_quote = loser.find('"', first_quote + 1)
        final_loser = (loser[:first_quote - 1],
                       loser[second_quote + 2:],
                       loser[first_quote + 1:second_quote])

        try:
            DB_MANAGER.add_ppresult(winner=final_winner, loser=final_loser)


        except elo_frontend.DBValueError as error:
            return flask.render_template('addppresult.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('addppresult.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('addppresult.html', error=error, players=players)

        else:
            pass

        message = 'Result successfully added'
        results = DB_MANAGER.get_all_ppresults()
        return flask.render_template('ppresult.html', message=message,
                                     results=results)

    elif flask.request.method == 'GET':
        return flask.render_template('addppresult.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addfbresult.html', methods=['GET', 'POST'])
def add_fbresult():
    """Foosball add result page

    Returns:
        displays foosball add result page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        offense_winner = flask.request.form['offense_winner'].encode('utf-8')
        offense_loser = flask.request.form['offense_loser'].encode('utf-8')
        defense_winner = flask.request.form['defense_winner'].encode('utf-8')
        defense_loser = flask.request.form['defense_loser'].encode('utf-8')

        first_quote = offense_winner.find('"')
        second_quote = offense_winner.find('"', first_quote + 1)
        final_offense_winner = (offense_winner[:first_quote - 1],
            offense_winner[second_quote + 2:],
            offense_winner[first_quote + 1:second_quote])

        first_quote = offense_loser.find('"')
        second_quote = offense_loser.find('"', first_quote + 1)
        final_offense_loser = (offense_loser[:first_quote - 1],
            offense_loser[second_quote + 2:],
            offense_loser[first_quote + 1:second_quote])

        first_quote = defense_winner.find('"')
        second_quote = defense_winner.find('"', first_quote + 1)
        final_defense_winner = (defense_winner[:first_quote - 1],
            defense_winner[second_quote + 2:],
            defense_winner[first_quote + 1:second_quote])

        first_quote = defense_loser.find('"')
        second_quote = defense_loser.find('"', first_quote + 1)
        final_defense_loser = (defense_loser[:first_quote - 1],
            defense_loser[second_quote + 2:],
            defense_loser[first_quote + 1:second_quote])

        try:
            DB_MANAGER.add_fbresult(
                offense_winner=final_offense_winner,
                defense_winner=final_defense_winner,
                offense_loser=final_offense_loser,
                defense_loser=final_defense_loser)

        except elo_frontend.DBValueError as error:
            return flask.render_template('addfbresult.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('addfbresult.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('addfbresult.html', error=error, players=players)

        else:
            pass

        message = 'Result successfully added'
        results = DB_MANAGER.get_all_fbresults()
        return flask.render_template('fbresult.html', message=message,
                                     results=results)

    elif flask.request.method == 'GET':
        return flask.render_template('addfbresult.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addmkresult.html', methods=['GET', 'POST'])
def add_mkresult():
    """Mario Kart add result page

    Returns:
        displays mario kart add result page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        first_place = flask.request.form['first_place'].encode('utf-8')
        second_place = flask.request.form['second_place'].encode('utf-8')
        third_place = flask.request.form['third_place'].encode('utf-8')
        fourth_place = flask.request.form['fourth_place'].encode('utf-8')
        course = flask.request.form['course'].encode('utf-8')

        first_quote = first_place.find('"')
        second_quote = first_place.find('"', first_quote + 1)
        final_first_place = (first_place[:first_quote - 1],
            first_place[second_quote + 2:],
            first_place[first_quote + 1:second_quote])

        first_quote = second_place.find('"')
        second_quote = second_place.find('"', first_quote + 1)
        final_second_place = (second_place[:first_quote - 1],
            second_place[second_quote + 2:],
            second_place[first_quote + 1:second_quote])

        if third_place == "N/A":
            final_third_place = False
        else:
            first_quote = third_place.find('"')
            second_quote = third_place.find('"', first_quote + 1)
            final_third_place = (third_place[:first_quote - 1],
                third_place[second_quote + 2:],
                third_place[first_quote + 1:second_quote])

        if fourth_place == "N/A":
            final_fourth_place = False
        else:
            first_quote = fourth_place.find('"')
            second_quote = fourth_place.find('"', first_quote + 1)
            final_fourth_place = (fourth_place[:first_quote - 1],
                fourth_place[second_quote + 2:],
                fourth_place[first_quote + 1:second_quote])

        try:
            DB_MANAGER.add_mkresult(
                first=final_first_place,
                second=final_second_place,
                third=final_third_place,
                fourth=final_fourth_place,
                course=course)

        except elo_frontend.DBValueError as error:
            return flask.render_template('addmkresult.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('addmkresult.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('addmkresult.html', error=error, players=players)

        else:
            pass

        message = 'Result successfully added'
        results = DB_MANAGER.get_all_mkresults()
        return flask.render_template('mkresult.html', message=message,
                                     results=results)

    elif flask.request.method == 'GET':
        return flask.render_template('addmkresult.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addssresult.html', methods=['GET', 'POST'])
def add_ssresult():
    """Super smash add result page

    Returns:
        displays super smash add result page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        first_place = flask.request.form['first_place'].encode('utf-8')
        char_first_place = flask.request.form['char_first_place'].encode('utf-8')
        second_place = flask.request.form['second_place'].encode('utf-8')
        char_second_place = flask.request.form['char_second_place'].encode('utf-8')
        third_place = flask.request.form['third_place'].encode('utf-8')
        char_third_place = flask.request.form['char_third_place'].encode('utf-8')
        fourth_place = flask.request.form['fourth_place'].encode('utf-8')
        char_fourth_place = flask.request.form['char_fourth_place'].encode('utf-8')
        fifth_place = flask.request.form['fifth_place'].encode('utf-8')
        char_fifth_place = flask.request.form['char_fifth_place'].encode('utf-8')
        sixth_place = flask.request.form['sixth_place'].encode('utf-8')
        char_sixth_place = flask.request.form['char_sixth_place'].encode('utf-8')
        seventh_place = flask.request.form['seventh_place'].encode('utf-8')
        char_seventh_place = flask.request.form['char_seventh_place'].encode('utf-8')
        eighth_place = flask.request.form['eighth_place'].encode('utf-8')
        char_eighth_place = flask.request.form['char_eighth_place'].encode('utf-8')

        first_quote = first_place.find('"')
        second_quote = first_place.find('"', first_quote + 1)
        final_first_place = (first_place[:first_quote - 1],
            first_place[second_quote + 2:],
            first_place[first_quote + 1:second_quote])

        first_quote = second_place.find('"')
        second_quote = second_place.find('"', first_quote + 1)
        final_second_place = (second_place[:first_quote - 1],
            second_place[second_quote + 2:],
            second_place[first_quote + 1:second_quote])

        if third_place == "N/A":
            final_third_place = False
        else:
            first_quote = third_place.find('"')
            second_quote = third_place.find('"', first_quote + 1)
            final_third_place = (third_place[:first_quote - 1],
                third_place[second_quote + 2:],
                third_place[first_quote + 1:second_quote])
        if char_third_place == "N/A":
            char_third_place = False

        if fourth_place == "N/A":
            final_fourth_place = False
        else:
            first_quote = fourth_place.find('"')
            second_quote = fourth_place.find('"', first_quote + 1)
            final_fourth_place = (fourth_place[:first_quote - 1],
                fourth_place[second_quote + 2:],
                fourth_place[first_quote + 1:second_quote])
        if char_fourth_place == "N/A":
            char_fourth_place = False

        if fifth_place == "N/A":
            final_fifth_place = False
        else:
            first_quote = fifth_place.find('"')
            second_quote = fifth_place.find('"', first_quote + 1)
            final_fifth_place = (fifth_place[:first_quote - 1],
                fifth_place[second_quote + 2:],
                fifth_place[first_quote + 1:second_quote])
        if char_fifth_place == "N/A":
            char_fifth_place = False

        if sixth_place == "N/A":
            final_sixth_place = False
        else:
            first_quote = sixth_place.find('"')
            second_quote = sixth_place.find('"', first_quote + 1)
            final_sixth_place = (sixth_place[:first_quote - 1],
                sixth_place[second_quote + 2:],
                sixth_place[first_quote + 1:second_quote])
        if char_sixth_place == "N/A":
            char_sixth_place = False

        if seventh_place == "N/A":
            final_seventh_place = False
        else:
            first_quote = seventh_place.find('"')
            second_quote = seventh_place.find('"', first_quote + 1)
            final_seventh_place = (seventh_place[:first_quote - 1],
                seventh_place[second_quote + 2:],
                seventh_place[first_quote + 1:second_quote])
        if char_seventh_place == "N/A":
            char_seventh_place = False

        if eighth_place == "N/A":
            final_eighth_place = False
        else:
            first_quote = eighth_place.find('"')
            second_quote = eighth_place.find('"', first_quote + 1)
            final_eighth_place = (eighth_place[:first_quote - 1],
                eighth_place[second_quote + 2:],
                eighth_place[first_quote + 1:second_quote])
        if char_eighth_place == "N/A":
            char_eighth_place = False

        try:
            DB_MANAGER.add_ssresult(
                first=final_first_place,
                char_first=char_first_place,
                second=final_second_place,
                char_second=char_second_place,
                third=final_third_place,
                char_third=char_third_place,
                fourth=final_fourth_place,
                char_fourth=char_fourth_place,
                fifth=final_fifth_place,
                char_fifth=char_fifth_place,
                sixth=final_sixth_place,
                char_sixth=char_sixth_place,
                seventh=final_seventh_place,
                char_seventh=char_seventh_place,
                eighth=final_eighth_place,
                char_eighth=char_eighth_place)

        except elo_frontend.DBValueError as error:
            return flask.render_template('addssresult.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('addssresult.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('addssresult.html', error=error, players=players)

        else:
            pass

        message = 'Result successfully added'
        results = DB_MANAGER.get_all_ssresults()
        return flask.render_template('ssresult.html', message=message,
                                     results=results)

    elif flask.request.method == 'GET':
        return flask.render_template('addssresult.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/delppresult.html')
def del_ppresult():
    """Ping pong delete result functionality

    Returns:
        displays ping pong result page

    """

    results = DB_MANAGER.get_all_ppresults()

    try:
        DB_MANAGER.delete_last_ppresult()

    except elo_frontend.DBValueError as error:
        return flask.render_template('ppresult.html', error=error, results=results)

    except elo_frontend.DBConnectionError as error:
        return flask.render_template('ppresult.html', error=error, results=results)

    except elo_frontend.DBSyntaxError as error:
        return flask.render_template('ppresult.html', error=error, results=results)

    else:
        pass

    message = 'Result successfully deleted'
    results = DB_MANAGER.get_all_ppresults()
    return flask.render_template('ppresult.html', message=message,
                                 results=results)

@FRONTEND.route('/delfbresult.html')
def del_fbresult():
    """Foosball delete result functionality

    Returns:
        displays foosball result page

    """

    results = DB_MANAGER.get_all_fbresults()

    try:
        DB_MANAGER.delete_last_fbresult()

    except elo_frontend.DBValueError as error:
        return flask.render_template('fbresult.html', error=error, results=results)

    except elo_frontend.DBConnectionError as error:
        return flask.render_template('fbresult.html', error=error, results=results)

    except elo_frontend.DBSyntaxError as error:
        return flask.render_template('fbresult.html', error=error, results=results)

    else:
        pass

    message = 'Result successfully deleted'
    results = DB_MANAGER.get_all_fbresults()
    return flask.render_template('fbresult.html', message=message,
                                 results=results)

@FRONTEND.route('/delmkresult.html')
def del_mkresult():
    """MK delete result functionality

    Returns:
        displays mk result page

    """

    results = DB_MANAGER.get_all_mkresults()

    try:
        DB_MANAGER.delete_last_mkresult()

    except elo_frontend.DBValueError as error:
        return flask.render_template('mkresult.html', error=error, results=results)

    except elo_frontend.DBConnectionError as error:
        return flask.render_template('mkresult.html', error=error, results=results)

    except elo_frontend.DBSyntaxError as error:
        return flask.render_template('mkresult.html', error=error, results=results)

    else:
        pass

    message = 'Result successfully deleted'
    results = DB_MANAGER.get_all_mkresults()
    return flask.render_template('mkresult.html', message=message,
                                 results=results)

@FRONTEND.route('/delssresult.html')
def del_ssresult():
    """SSdelete result functionality

    Returns:
        displays ss result page

    """

    results = DB_MANAGER.get_all_ssresults()

    try:
        DB_MANAGER.delete_last_ssresult()

    except elo_frontend.DBValueError as error:
        return flask.render_template('ssresult.html', error=error, results=results)

    except elo_frontend.DBConnectionError as error:
        return flask.render_template('ssresult.html', error=error, results=results)

    except elo_frontend.DBSyntaxError as error:
        return flask.render_template('ssresult.html', error=error, results=results)

    else:
        pass

    message = 'Result successfully deleted'
    results = DB_MANAGER.get_all_ssresults()
    return flask.render_template('ssresult.html', message=message,
                                 results=results)

@FRONTEND.route('/editppplayer.html', methods=['GET', 'POST'])
def edit_ppplayer():
    """Ping pong edit player page

    Returns:
        displays ping pong edit player page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        previous_player = flask.request.form['previous_player'].encode('utf-8')

        first_quote = previous_player.find('"')
        second_quote = previous_player.find('"', first_quote + 1)
        previous_player = (previous_player[:first_quote - 1],
            previous_player[second_quote + 2:],
            previous_player[first_quote + 1:second_quote])

        previous_player = {'previous_first_name': previous_player[0],
                           'previous_last_name': previous_player[1],
                           'previous_nickname': previous_player[2]}
        new_player = {'first_name': flask.request.form['first_name'].encode('utf-8'),
               'last_name': flask.request.form['last_name'].encode('utf-8'),
               'nickname': flask.request.form['nickname'].encode('utf-8')}

        try:
            DB_MANAGER.edit_player(previous_player, new_player)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editppplayer.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editppplayer.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editppplayer.html', error=error, players=players)

        else:
            pass

        message = 'Player successfully edited'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('ppplayer.html', message=message, players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('editppplayer.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/editfbplayer.html', methods=['GET', 'POST'])
def edit_fbplayer():
    """Foosball edit player page

    Returns:
        displays foosball edit player page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        previous_player = flask.request.form['previous_player'].encode('utf-8')

        first_quote = previous_player.find('"')
        second_quote = previous_player.find('"', first_quote + 1)
        previous_player = (previous_player[:first_quote - 1],
            previous_player[second_quote + 2:],
            previous_player[first_quote + 1:second_quote])

        previous_player = {'previous_first_name': previous_player[0],
                           'previous_last_name': previous_player[1],
                           'previous_nickname': previous_player[2]}
        new_player = {'first_name': flask.request.form['first_name'].encode('utf-8'),
               'last_name': flask.request.form['last_name'].encode('utf-8'),
               'nickname': flask.request.form['nickname'].encode('utf-8')}

        try:
            DB_MANAGER.edit_player(previous_player, new_player)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editfbplayer.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editfbplayer.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editfbplayer.html', error=error, players=players)

        else:
            pass

        message = 'Player successfully edited'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('fbplayer.html', message=message, players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('editfbplayer.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/editmkplayer.html', methods=['GET', 'POST'])
def edit_mkplayer():
    """Mario Kart edit player page

    Returns:
        displays mario kart edit player page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        previous_player = flask.request.form['previous_player'].encode('utf-8')

        first_quote = previous_player.find('"')
        second_quote = previous_player.find('"', first_quote + 1)
        previous_player = (previous_player[:first_quote - 1],
            previous_player[second_quote + 2:],
            previous_player[first_quote + 1:second_quote])

        previous_player = {'previous_first_name': previous_player[0],
                           'previous_last_name': previous_player[1],
                           'previous_nickname': previous_player[2]}
        new_player = {'first_name': flask.request.form['first_name'].encode('utf-8'),
               'last_name': flask.request.form['last_name'].encode('utf-8'),
               'nickname': flask.request.form['nickname'].encode('utf-8')}

        try:
            DB_MANAGER.edit_player(previous_player, new_player)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editmkplayer.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editmkplayer.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editmkplayer.html', error=error, players=players)

        else:
            pass

        message = 'Player successfully edited'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('mkplayer.html', message=message, players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('editmkplayer.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/editmpplayer.html', methods=['GET', 'POST'])
def edit_mpplayer():
    """Mario party edit player page

    Returns:
        displays mario party edit player page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        previous_player = flask.request.form['previous_player'].encode('utf-8')

        first_quote = previous_player.find('"')
        second_quote = previous_player.find('"', first_quote + 1)
        previous_player = (previous_player[:first_quote - 1],
            previous_player[second_quote + 2:],
            previous_player[first_quote + 1:second_quote])

        previous_player = {'previous_first_name': previous_player[0],
                           'previous_last_name': previous_player[1],
                           'previous_nickname': previous_player[2]}
        new_player = {'first_name': flask.request.form['first_name'].encode('utf-8'),
               'last_name': flask.request.form['last_name'].encode('utf-8'),
               'nickname': flask.request.form['nickname'].encode('utf-8')}

        try:
            DB_MANAGER.edit_player(previous_player, new_player)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editmpplayer.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editmpplayer.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editmpplayer.html', error=error, players=players)

        else:
            pass

        message = 'Player successfully edited'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('mpplayer.html', message=message, players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('editmpplayer.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/editssplayer.html', methods=['GET', 'POST'])
def edit_ssplayer():
    """Super smash edit player page

    Returns:
        displays super smash edit player page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        previous_player = flask.request.form['previous_player'].encode('utf-8')

        first_quote = previous_player.find('"')
        second_quote = previous_player.find('"', first_quote + 1)
        previous_player = (previous_player[:first_quote - 1],
            previous_player[second_quote + 2:],
            previous_player[first_quote + 1:second_quote])

        previous_player = {'previous_first_name': previous_player[0],
                           'previous_last_name': previous_player[1],
                           'previous_nickname': previous_player[2]}
        new_player = {'first_name': flask.request.form['first_name'].encode('utf-8'),
               'last_name': flask.request.form['last_name'].encode('utf-8'),
               'nickname': flask.request.form['nickname'].encode('utf-8')}

        try:
            DB_MANAGER.edit_player(previous_player, new_player)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editssplayer.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editssplayer.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editssplayer.html', error=error, players=players)

        else:
            pass

        message = 'Player successfully edited'
        players = DB_MANAGER.get_all_players()
        return flask.render_template('ssplayer.html', message=message, players=players)

    elif flask.request.method == 'GET':
        return flask.render_template('editssplayer.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/addfbteam.html', methods=['GET', 'POST'])
def add_fbteam():
    """Foosball add team page

    Returns:
        displays team page

    """

    players = DB_MANAGER.get_all_players()

    if flask.request.method == 'POST':
        team_name = flask.request.form['team_name'].encode('utf-8')
        member_one = flask.request.form['member_one'].encode('utf-8')
        member_two = flask.request.form['member_two'].encode('utf-8')

        first_quote = member_one.find('"')
        second_quote = member_one.find('"', first_quote + 1)
        final_member_one = (member_one[:first_quote - 1],
            member_one[second_quote + 2:],
            member_one[first_quote + 1:second_quote])

        first_quote = member_two.find('"')
        second_quote = member_two.find('"', first_quote + 1)
        final_member_two = (member_two[:first_quote - 1],
            member_two[second_quote + 2:],
            member_two[first_quote + 1:second_quote])

        try:
            DB_MANAGER.add_fb_team(team_name=team_name,
                member_one=final_member_one, member_two=final_member_two)

        except elo_frontend.DBValueError as error:
            return flask.render_template('addfbteam.html', error=error, players=players)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('addfbteam.html', error=error, players=players)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('addfbteam.html', error=error, players=players)

        else:
            pass

        message = 'Team successfully added'
        teams = DB_MANAGER.get_all_fb_teams()
        return flask.render_template('fbteam.html', message=message, teams=teams)

    elif flask.request.method == 'GET':
        return flask.render_template('addfbteam.html', players=players)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

@FRONTEND.route('/editfbteam.html', methods=['GET', 'POST'])
def edit_fbteam():
    """Foosball edit team page

    Returns:
        displays foosball team page

    """

    teams = DB_MANAGER.get_all_fb_teams()

    if flask.request.method == 'POST':
        previous_team = flask.request.form['previous_team'].encode('utf-8')
        new_team = flask.request.form['new_team'].encode('utf-8')

        try:
            DB_MANAGER.edit_team(previous_team, new_team)

        except elo_frontend.DBValueError as error:
            return flask.render_template('editfbteam.html', error=error, teams=teams)

        except elo_frontend.DBConnectionError as error:
            return flask.render_template('editfbteam.html', error=error, teams=teams)

        except elo_frontend.DBSyntaxError as error:
            return flask.render_template('editfbteam.html', error=error, teams=teams)

        else:
            pass

        message = 'Team successfully edited'
        teams = DB_MANAGER.get_all_fb_teams()
        return flask.render_template('fbteam.html', message=message, teams=teams)

    elif flask.request.method == 'GET':
        return flask.render_template('editfbteam.html', teams=teams)

    else:
        raise elo_frontend.HTTPError("Received unrecognized HTTP method")

def setup_argparser():
    """ Creates Elo Frontend argument parser

    Returns:
        parser (obj):	argparse object

    """

    version = pkg_resources.require('elo_frontend')[0].version
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--version", action="version",
                        version="Elo Frontend " + str(version))
    return parser

def setup_config():
    """ Setup config file

    Returns:
        config (obj):   ConfigParser object

    """

    config = ConfigParser.RawConfigParser()
    config_directory = appdirs.user_config_dir('elo_frontend')
    config_file = os.path.join(config_directory, 'elo_frontend.conf')
    if not os.path.isfile(config_file):
        source = pkg_resources.resource_stream('config', 'elo_frontend.conf')
        if not os.path.isdir(config_directory):
            os.makedirs(config_directory)
        with open(config_file, 'w') as destination:
            destination.writelines(source)
    config.read(config_file)
    return config

def main():
    """Main function if ran standalone"""

    args = setup_argparser().parse_args()

    try:
        # get config file arguments
        config = setup_config()
    except IOError:
        traceback.print_exc()
        sys.exit("Aborting. Unable to find config file")
    else:
        pass

    try:
        FRONTEND.run(debug=True, port=config.get('options', 'port'), host=config.get('options', 'host'))
    except ConfigParser.NoSectionError:
        traceback.print_exc()
        sys.exit("Aborting. Missing section in config file")
    except ConfigParser.NoOptionError:
        traceback.print_exc()
        sys.exit("Aborting. Missing option in config file")
    else:
        pass

if __name__ == '__main__':
    main()
